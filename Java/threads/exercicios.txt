1 - Exceções verificadas são exceções que possuem a obrigatoriedade de serem tratadas, ou, caso contrário, o programa não compila. 
Em contrapartida, exceções não verificadas permitem que o programa compile e não precisam necessariamente serem tratadas.

2 - A estrutura é o try/catch. O try faz, basicamente, com que o programa tente realizar determinado método e, caso haja algum erro e não
seja possível realizar o que está dentro do bloco do try, é realizado o que está dentro do bloco do catch, sendo assim tratadas as exceções.
Ainda há um terceiro elemento, o finally, que sempre será executado após a verificação do try/catch, independente se o bloco utilizado foi
o do try ou o do catch. Assim, o finally é sempre executado, independetemente se o catch foi ou não executado.

3 - Sim, há uma hierarquia de exceções, sendo que todas as classes de exceções herdam diretamente da classe Exception.

4 - Conforme a hierarquia das exceções, é importante que os blocos catch sejam escritos da exceção mais específica para a mais genérica.
Se blocos catch referenciam exceções do mesmo ramo da hierarquia, o bloco catch mais específico deve preceder o mais genérico. Por exemplo:
se tivermos dois blocos catch, o primeiro com Exception e o segundo com FileNotFoundException, e uma exceção do tipo FileNotFoundException
ocorrer, o bloco que será executado será o bloco de Exception, pois ele é mais genérico e vem primeiro e, assim, o bloco catch de
FileNotFoundException nem ao menos será lido. Portanto, o ideal seria declarar primeiro o bloco FileNotFoundException e depois o 
bloco Exception. 

8 - Não. Como cada thread ficou responsável por uma faixa de valores distinta não há necessidade de sincronismo entre elas, visto que 
trabalham com dados diferentes. O sincronismo seria necessário caso duas ou mais threads trabalhassem com os mesmos dados, evitando-se,
assim, que as threads acabassem alterando dados desatualizados durante a execução. Um exemplo dessa necessidade é o caso de duas threads
estarem responsáveis por realizar o depósito em uma conta bancária. Dessa maneira, se, por exemplo, a conta tivesse R$500 e recebesse um
depósito de R$100 e, posteriormente, um novo depósito de mais 100R$, esse novo depósito poderia ser feito novamente em cima dos R$500, e não
em cima dos R$600 resultados do primeiro depósito, caso as threads estivessem dessincornizadas.

9 - Thread dormindo é o estado de uma Thread quando criada, sendo registrada na JVM. Thread executável é o estado quando uma Thread está
preparada para ser executada, ou seja, foi ativada, mas não necessariamente está sendo executada naquele momento. O processo de ativação 
é originiado pelo método start(). Thread executando é o estado de uma Thread equanto está sendo executada nesse momento, e isso depende 
da JVM e do SO, que determinam seu tempo de execução.

12 - No programa A, as Threads são criadas e adicionadas em um loop, depois são alocadas para sincronização em um segundo loop. No programa
B, as Threads já são adicionadas e sincronizadas no mesmo loop, tornando assim o programa mais eficiente.

13 - Synchronized serve para sincronizar Threads que irão trabalhar sobre o mesmo conjunto de dados, atributos ou métodos, para que as 
trabalhem em sincroniza, evitando-se, assim, que uma Thread faça alterações em dados desatualizados, que já foram modificados por outra
Thread, conforme exemplificado no exercício 8. Dessa maneira, esse modificador não é necessário se as Threads não irão trabalhar com os
mesmos dados.

14 - O método join() serve para que as Threads se juntem a um sincronizador e, portanto, trabalhem em sincronia. Dessa maneira, conforme o 
tempo de execução de cada Thread, uma Thread não irá atrabalhar as modificações de outra Thread. Em outras palavras, as Threads irão esperar
pelo momento de sua execução, respeitando o tempo de execução das outras Threads. O método sleep(), por sua vez, bloqueia imediatamente a 
execução da Thread pelo tempo que foi passado por parâmetro, retomando a execução da Thread assim que o tempo é esgotado.

15 - C: As Threads estão sincronizadas, então não há o risco de uma Thread eventualmente obter o mesmo número que outra Thread, visto que
o método nextCount() sempre irá incrementer myCount;

